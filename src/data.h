
#ifndef DATA_H_
#define DATA_H_

#define CARD_NAME "16 Universal Inputs"
#define PROGRAM_NAME "16univin"
#define VERSION "1.1.0"

#define SLAVE_OWN_ADDRESS_BASE 0x58

#define MIN_CH_NO 1
#define UNIV_CH_NR 16
#define COUNTER_SIZE 4
#define ANALOG_VAL_SIZE 2
#define MODBUS_SETTINGS_SIZE_B 5
#define LED_CH_NO 16


#define CALIBRATION_KEY 0xaa
#define RESET_CALIBRATION_KEY	0x55
#define WDT_RESET_SIGNATURE     0xca
#define WDT_RESET_COUNT_SIGNATURE    0xbe

#define VOLT_TO_MILIVOLT 1000
#define MILIAMPER_TO_MICROAMPER 1000

enum
{
	CALIB_IN_PROGRESS = 0,
	CALIB_DONE,
	CALIB_ERROR,
};

enum
{
	CALIB_CH_NONE = 0,
	CALIB_CH_V_IN1,
	CALIB_CH_1K_IN1 = CALIB_CH_V_IN1 + UNIV_CH_NR,
	CALIB_CH_10K_IN1 = CALIB_CH_1K_IN1 + UNIV_CH_NR,

};

enum
{

	I2C_MEM_LEDS,
	I2C_MEM_LED_SET = I2C_MEM_LEDS + 2,
	I2C_MEM_LED_CLR,

	I2C_MEM_DRY_CONTACT,

	I2C_U0_10_IN_VAL1_ADD = I2C_MEM_DRY_CONTACT + 2,

	I2C_R_1K_CH1 = I2C_U0_10_IN_VAL1_ADD + UNIV_CH_NR * ANALOG_VAL_SIZE,
	I2C_R_10K_CH1 = I2C_R_1K_CH1 + UNIV_CH_NR * ANALOG_VAL_SIZE,


	I2C_MEM_DIAG_TEMPERATURE_ADD = I2C_R_10K_CH1 + UNIV_CH_NR * ANALOG_VAL_SIZE,
	I2C_MEM_DC_CNT_ENABLE,

	I2C_MEM_DC_CNT_RST_ADD = I2C_MEM_DC_CNT_ENABLE + 2,

	I2C_MEM_DC_CNT_ADD,
	I2C_MEM_DC_CNT_END_ADD = I2C_MEM_DC_CNT_ADD + UNIV_CH_NR * COUNTER_SIZE,

	I2C_MEM_UPDATE_ADD = 0xaa,

	I2C_MEM_CALIB_VALUE,
	I2C_MEM_CALIB_CHANNEL = I2C_MEM_CALIB_VALUE + 4,
	I2C_MEM_CALIB_KEY, //set calib point -> 0xaa; reset calibration on the channel -> 0x55
	I2C_MEM_CALIB_STATUS,

	I2C_RTC_YEAR_ADD,
	I2C_RTC_MONTH_ADD,
	I2C_RTC_DAY_ADD,
	I2C_RTC_HOUR_ADD,
	I2C_RTC_MINUTE_ADD,
	I2C_RTC_SECOND_ADD,
	I2C_RTC_SET_YEAR_ADD,
	I2C_RTC_SET_MONTH_ADD,
	I2C_RTC_SET_DAY_ADD,
	I2C_RTC_SET_HOUR_ADD,
	I2C_RTC_SET_MINUTE_ADD,
	I2C_RTC_SET_SECOND_ADD,
	I2C_RTC_CMD_ADD,

	I2C_MEM_WDT_RESET_ADD,
	I2C_MEM_WDT_INTERVAL_SET_ADD,
	I2C_MEM_WDT_INTERVAL_GET_ADD = I2C_MEM_WDT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_SET_ADD = I2C_MEM_WDT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_GET_ADD = I2C_MEM_WDT_INIT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_RESET_COUNT_ADD = I2C_MEM_WDT_INIT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_CLEAR_RESET_COUNT_ADD = I2C_MEM_WDT_RESET_COUNT_ADD + 2,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD = I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD + 4,
	I2C_MEM_BUTTON = I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD + 4,
	I2C_MEM_DIAG_RASP_V,
	I2C_MEM_DIAG_RASP_V1,

   I2C_MODBUS_SETINGS_ADD,

	I2C_MEM_REVISION_HW_MAJOR_ADD = I2C_MODBUS_SETINGS_ADD + MODBUS_SETTINGS_SIZE_B,
	I2C_MEM_REVISION_HW_MINOR_ADD,
	I2C_MEM_REVISION_MAJOR_ADD,
	I2C_MEM_REVISION_MINOR_ADD,
	I2C_MEM_IN_SEL_START_ADD,
	I2C_MEM_IN_SEL_STOP_ADD = I2C_MEM_IN_SEL_START_ADD + UNIV_CH_NR / 2 - 1,

	SLAVE_BUFF_SIZE = 256,
};

#define OK 0
#define ERR -1
#define ARG_CNT_ERR -2
#define ARG_RANGE_ERR -3
#define IO_ERR -4

#define STR_(x) #x
#define STR(x) STR_(x)
#define MASK_1 1
#define MASK_2 3
#define MASK_3 7
#define MASK_4 15
#define MASK_5 31
#define MASK_6 63
#define MASK_7 127
#define MASK_(x) MASK_##x
#define MASK(x) MASK_(x)

typedef enum {
	OFF,
	ON,
	STATE_COUNT,
} State;

#endif /* DATA_H_ */
